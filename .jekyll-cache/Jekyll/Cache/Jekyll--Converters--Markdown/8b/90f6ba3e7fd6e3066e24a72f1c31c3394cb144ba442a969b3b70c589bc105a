I"‚0<!-- 
<figure class="highlight"><pre><code class="language-c--" data-lang="c++"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre>    <span class="kr">inline</span> <span class="k">auto</span> <span class="nf">getBcEntsPtr</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Range</span><span class="o">&gt;</span><span class="p">(</span><span class="n">shared_from_this</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">bcEnts</span><span class="p">);</span>
    <span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>
 -->

<p>An extensive list of C++ standards features can be found here <a href="https://github.com/AnthonyCalandra/modern-cpp-features">(Under this link)</a>.</p>

<p>C++17 includes the following new language features:</p>
<ul>
  <li><a href="#template-argument-deduction-for-class-templates">template argument deduction for class templates</a></li>
  <li><a href="#declaring-non-type-template-parameters-with-auto">declaring non-type template parameters with auto</a></li>
  <li><a href="#folding-expressions">folding expressions</a></li>
  <li><a href="#new-rules-for-auto-deduction-from-braced-init-list">new rules for auto deduction from braced-init-list</a></li>
  <li><a href="#constexpr-lambda">constexpr lambda</a></li>
  <li><a href="#lambda-capture-this-by-value">lambda capture this by value</a></li>
  <li><a href="#inline-variables">inline variables</a></li>
  <li><a href="#nested-namespaces">nested namespaces</a></li>
  <li><a href="#structured-bindings">structured bindings</a></li>
  <li><a href="#selection-statements-with-initializer">selection statements with initializer</a></li>
  <li><a href="#constexpr-if">constexpr if</a></li>
  <li><a href="#utf-8-character-literals">utf-8 character literals</a></li>
  <li><a href="#direct-list-initialization-of-enums">direct-list-initialization of enums</a></li>
  <li><a href="#fallthrough-nodiscard-maybe_unused-attributes">fallthrough, nodiscard, maybe_unused attributes</a></li>
  <li><a href="#\_\_has\_include">__has_include</a></li>
</ul>

<p>C++17 includes the following new standard library features:</p>
<ul>
  <li><a href="#stdvariant">std::variant</a></li>
  <li><a href="#stdoptional">std::optional</a></li>
  <li><a href="#stdany">std::any</a></li>
  <li><a href="#stdstring_view">std::string_view</a></li>
  <li><a href="#stdinvoke">std::invoke</a></li>
  <li><a href="#stdapply">std::apply</a></li>
  <li><a href="#stdfilesystem">std::filesystem</a></li>
  <li><a href="#stdbyte">std::byte</a></li>
  <li><a href="#splicing-for-maps-and-sets">splicing for maps and sets</a></li>
  <li><a href="#parallel-algorithms">parallel algorithms</a></li>
</ul>

<p>C++14 includes the following new language features:</p>
<ul>
  <li><a href="#binary-literals">binary literals</a></li>
  <li><a href="#generic-lambda-expressions">generic lambda expressions</a></li>
  <li><a href="#lambda-capture-initializers">lambda capture initializers</a></li>
  <li><a href="#return-type-deduction">return type deduction</a></li>
  <li><a href="#decltypeauto">decltype(auto)</a></li>
  <li><a href="#relaxing-constraints-on-constexpr-functions">relaxing constraints on constexpr functions</a></li>
  <li><a href="#variable-templates">variable templates</a></li>
  <li><a href="#deprecated-attribute">[[deprecated]] attribute</a></li>
</ul>

<p>C++14 includes the following new standard library features:</p>
<ul>
  <li><a href="#user-defined-literals-for-standard-library-types">user-defined literals for standard library types</a></li>
  <li><a href="#compile-time-integer-sequences">compile-time integer sequences</a></li>
  <li><a href="#stdmake_unique">std::make_unique</a></li>
</ul>

<p>C++11 includes the following new language features:</p>
<ul>
  <li><a href="#move-semantics">move semantics</a></li>
  <li><a href="#variadic-templates">variadic templates</a></li>
  <li><a href="#rvalue-references">rvalue references</a></li>
  <li><a href="#forwarding-references">forwarding references</a></li>
  <li><a href="#initializer-lists">initializer lists</a></li>
  <li><a href="#static-assertions">static assertions</a></li>
  <li><a href="#auto">auto</a></li>
  <li><a href="#lambda-expressions">lambda expressions</a></li>
  <li><a href="#decltype">decltype</a></li>
  <li><a href="#type-aliases">type aliases</a></li>
  <li><a href="#nullptr">nullptr</a></li>
  <li><a href="#strongly-typed-enums">strongly-typed enums</a></li>
  <li><a href="#attributes">attributes</a></li>
  <li><a href="#constexpr">constexpr</a></li>
  <li><a href="#delegating-constructors">delegating constructors</a></li>
  <li><a href="#user-defined-literals">user-defined literals</a></li>
  <li><a href="#explicit-virtual-overrides">explicit virtual overrides</a></li>
  <li><a href="#final-specifier">final specifier</a></li>
  <li><a href="#default-functions">default functions</a></li>
  <li><a href="#deleted-functions">deleted functions</a></li>
  <li><a href="#range-based-for-loops">range-based for loops</a></li>
  <li><a href="#special-member-functions-for-move-semantics">special member functions for move semantics</a></li>
  <li><a href="#converting-constructors">converting constructors</a></li>
  <li><a href="#explicit-conversion-functions">explicit conversion functions</a></li>
  <li><a href="#inline-namespaces">inline-namespaces</a></li>
  <li><a href="#non-static-data-member-initializers">non-static data member initializers</a></li>
  <li><a href="#right-angle-brackets">right angle brackets</a></li>
  <li><a href="#ref-qualified-member-functions">ref-qualified member functions</a></li>
  <li><a href="#trailing-return-types">trailing return types</a></li>
  <li><a href="#noexcept-specifier">noexcept specifier</a></li>
  <li><a href="#char32_t-and-char16_t">char32_t and char16_t</a></li>
  <li><a href="#raw-string-literals">raw string literals</a></li>
</ul>

<p>C++11 includes the following new standard library features:</p>
<ul>
  <li><a href="#stdmove">std::move</a></li>
  <li><a href="#stdforward">std::forward</a></li>
  <li><a href="#stdthread">std::thread</a></li>
  <li><a href="#stdto_string">std::to_string</a></li>
  <li><a href="#type-traits">type traits</a></li>
  <li><a href="#smart-pointers">smart pointers</a></li>
  <li><a href="#stdchrono">std::chrono</a></li>
  <li><a href="#tuples">tuples</a></li>
  <li><a href="#stdtie">std::tie</a></li>
  <li><a href="#stdarray">std::array</a></li>
  <li><a href="#unordered-containers">unordered containers</a></li>
  <li><a href="#stdmake_shared">std::make_shared</a></li>
  <li><a href="#stdref">std::ref</a></li>
  <li><a href="#memory-model">memory model</a></li>
  <li><a href="#stdasync">std::async</a></li>
  <li><a href="#stdbeginend">std::begin/end</a></li>
</ul>

<!-- * class template argument deduction
* inline variable
* initializers for `if` and `switch`
* lambda capture of `this`
* `constexpr` lambda -->

<h3 id="modern-c17-standard-features-used-by-mofem">Modern C++17 standard features used by MoFEM</h3>

<h3 id="modern-c14-standard-features-used-by-mofem">Modern C++14 standard features used by MoFEM</h3>

<h5 id="return-type-deduction">return type deduction</h5>
<p>Using an <code class="language-plaintext highlighter-rouge">auto</code> return type in C++14, the compiler will attempt to deduce the type for you. With lambdas, you can now deduce its return type using <code class="language-plaintext highlighter-rouge">auto</code>, which makes returning a deduced reference or rvalue reference possible.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kr">inline</span> <span class="k">auto</span> <span class="nf">getBcEntsPtr</span><span class="p">()</span> <span class="p">{</span>
      <span class="k">return</span> <span class="n">boost</span><span class="o">::</span><span class="n">shared_ptr</span><span class="o">&lt;</span><span class="n">Range</span><span class="o">&gt;</span><span class="p">(</span><span class="n">shared_from_this</span><span class="p">(),</span> <span class="o">&amp;</span><span class="n">bcEnts</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<h5 id="decltypeauto">decltype(auto)</h5>
<p>The <code class="language-plaintext highlighter-rouge">decltype(auto)</code> type-specifier also deduces a type like <code class="language-plaintext highlighter-rouge">auto</code> does. However, it deduces return types while keeping their references and cv-qualifiers (<code class="language-plaintext highlighter-rouge">const</code> and <code class="language-plaintext highlighter-rouge">volatile</code>), while <code class="language-plaintext highlighter-rouge">auto</code> will not.</p>
<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>     <span class="k">auto</span> <span class="n">dit</span> <span class="o">=</span> <span class="n">p_miit</span><span class="o">-&gt;</span><span class="n">numeredColDofsPtr</span><span class="o">-&gt;</span><span class="n">lower_bound</span><span class="p">(</span><span class="n">uid</span><span class="p">);</span>
     <span class="k">decltype</span><span class="p">(</span><span class="n">dit</span><span class="p">)</span> <span class="n">hi_dit</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="modern-c11-standard-features-used-by-mofem">Modern C++11 standard features used by MoFEM</h3>

<h5 id="move-semantics">move semantics</h5>
<p>Moving an object means to transfer ownership of some resource it manages to another object.</p>

<p>The first benefit of move semantics is performance optimization. When an object is about to reach the end of its lifetime, either because itâ€™s a temporary or by explicitly calling <code class="language-plaintext highlighter-rouge">std::move</code>, a move is often a cheaper way to transfer resources. For example, moving a <code class="language-plaintext highlighter-rouge">std::vector</code> is just copying some pointers and internal state over to the new vector â€“ copying would involve having to copy every single contained element in the vector, which is expensive and unnecessary if the old vector will soon be destroyed.</p>

<div class="language-cpp highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// preprocess</span>
  <span class="k">for</span> <span class="p">(</span><span class="k">auto</span> <span class="o">&amp;</span><span class="n">bit</span> <span class="o">:</span> <span class="n">ts_ctx</span><span class="o">-&gt;</span><span class="n">preProcessIFunction</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">bit</span><span class="o">-&gt;</span><span class="n">vecAssembleSwitch</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">ts_ctx</span><span class="o">-&gt;</span><span class="n">vecAssembleSwitch</span><span class="p">);</span>
    <span class="n">set</span><span class="p">(</span><span class="o">*</span><span class="n">bit</span><span class="p">);</span>
    <span class="n">CHKERR</span> <span class="n">ts_ctx</span><span class="o">-&gt;</span><span class="n">mField</span><span class="p">.</span><span class="n">problem_basic_method_preProcess</span><span class="p">(</span><span class="n">ts_ctx</span><span class="o">-&gt;</span><span class="n">problemName</span><span class="p">,</span>
                                                          <span class="o">*</span><span class="n">bit</span><span class="p">);</span>
    <span class="n">unset</span><span class="p">(</span><span class="o">*</span><span class="n">bit</span><span class="p">);</span>
    <span class="n">ts_ctx</span><span class="o">-&gt;</span><span class="n">vecAssembleSwitch</span> <span class="o">=</span> <span class="n">boost</span><span class="o">::</span><span class="n">move</span><span class="p">(</span><span class="n">bit</span><span class="o">-&gt;</span><span class="n">vecAssembleSwitch</span><span class="p">);</span>
  <span class="p">}</span>
</code></pre></div></div>
:ET